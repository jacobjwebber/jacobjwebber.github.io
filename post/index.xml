<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jacob J Webber</title>
    <link>https://jacobjwebber.github.io/post/index.xml</link>
    <description>Recent content in Posts on Jacob J Webber</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Dec 2016 20:07:17 +0000</lastBuildDate>
    <atom:link href="https://jacobjwebber.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building a Personal Website with Hugo</title>
      <link>https://jacobjwebber.github.io/post/new-blog/</link>
      <pubDate>Thu, 29 Dec 2016 20:07:17 +0000</pubDate>
      
      <guid>https://jacobjwebber.github.io/post/new-blog/</guid>
      <description>

&lt;h2 id=&#34;new-blog&#34;&gt;New Blog!&lt;/h2&gt;

&lt;p&gt;Where better to start a new blog than a blog post about how I made this blog.&lt;/p&gt;

&lt;p&gt;Over the last Christmas holidays I have started playing around with the Go programming languages. Wow! What a great
programming language! At work I mainly wrote Java code, and at University I mainly use C. Go seems to combine a lot of
the positive aspects of both. It also has a very interesting and neat model for writing parallel or concurrent programs.
I hope to write a blog about this soon as I have been working on porting some OpenMP code over to Go.&lt;/p&gt;

&lt;p&gt;To show all this off I thought I had better make a personal website. I already had already set up a github pages repo
and just needed some pages to fill it. I am not a big fan of (or very good at) doing web development or building GUIs of
any sort, so wanted some way of automating this process. I read about Hugo, which is a static web generator built in Go,
and it seemed to be a good fit for what I wanted.&lt;/p&gt;

&lt;p&gt;The basic principle is that you write a bunch of markdown files for all your posts and hugo will render it into a
beautiful website. It works using the HTML templating library for Go. I haven&amp;rsquo;t really looked into this yet, but it
looks quite similar, at least superficially, to Mustache, which I used at my old job with Java.&lt;/p&gt;

&lt;h3 id=&#34;installing-hugo&#34;&gt;Installing Hugo&lt;/h3&gt;

&lt;p&gt;I have been playing with Go so I decided to install Hugo from sources, with a hope to maybe poking around in the source
code at some point.
With Go installed and a GOPATH environment variable set:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src &amp;amp;&amp;amp; go get -v github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will cd to your go src dir and download all of the hugo source code, as well as its dependendencies, then compile it
all. If you have $GOPATH/bin added to your $PATH then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will work as expected. Excellent!&lt;/p&gt;

&lt;p&gt;Now, ours is the privelege of easily building a web site.&lt;/p&gt;

&lt;h3 id=&#34;my-first-hugo-website&#34;&gt;My First (Hugo) Website&lt;/h3&gt;

&lt;p&gt;First use&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to create a new directory with the basic files in. Then content can be added with the command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/new-blog.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a new directory &amp;lsquo;post&amp;rsquo;, which will be mirrored in the site structure. Before generating a web page I had to
add a theme. I am using the &lt;a href=&#34;https://github.com/LordMathis/hugo-theme-nix&#34;&gt;nix&lt;/a&gt; theme, which I have a very high opinion
of. Many thanks indeed to Lord Mathis for making it and making it open source.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir themes
cd themes
git clone https://github.com/LordMathis/hugo-theme-nix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugo has a localhost server built in for your web site. It will watch your markdown files for changes. Great!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server --theme=hugo-theme-nix --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without the &amp;lsquo;server&amp;rsquo; argument, Hugo will just output the html files/css etc into a &amp;lsquo;public&amp;rsquo; dir.&lt;/p&gt;

&lt;p&gt;At present I manually copy this over into my github pages repo. I intend to automate this later. I will probably end up
using Travis CI or something similar to build and deploy whenever I push to a specific branch in my Hugo &lt;a href=&#34;https://github.com/jacobjwebber/hugo_blog&#34;&gt;raw files git
repo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>